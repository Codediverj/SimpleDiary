{"ast":null,"code":"var _jsxFileName = \"/Users/jee/Desktop/simpleDiary/src/App.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from \"react\";\nimport './App.css';\nimport DiaryEditor from './DiaryEditor';\nimport DiaryList from './DiaryList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  const dataId = useRef(0);\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current\n    };\n    dataId.current += 1;\n    setData([newItem, ...data]);\n  };\n  const onDelete = targetId => {\n    console.log(`${targetId}가 삭제되었습니다`);\n    const newDiaryList = data.filter(it => it.id !== targetId);\n    //해당 id의 리스트를 제외하고 다시 필터링해서 리스트 배열하기.\n    setData(newDiaryList);\n    // 그런다음 바뀐 변화를 적용하기.\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(DiaryEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryList, {\n      onDelete: onDelete,\n      diaryList: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PSh4R9M9XXzghkCT8iIKMDh9kfM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useRef","useState","DiaryEditor","DiaryList","App","data","setData","dataId","onCreate","author","content","emotion","created_date","Date","getTime","newItem","id","current","onDelete","targetId","console","log","newDiaryList","filter","it"],"sources":["/Users/jee/Desktop/simpleDiary/src/App.js"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport './App.css';\nimport DiaryEditor from './DiaryEditor';\nimport DiaryList from './DiaryList';\n\nfunction App() {\n\n  const [data, setData] = useState([]);\n  const dataId = useRef(0);\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id : dataId.current\n    }\n    dataId.current += 1;\n    setData([newItem, ...data]);\n  };\n\n  const onDelete = (targetId) => {\n    console.log(`${targetId}가 삭제되었습니다`);\n    const newDiaryList = data.filter((it)=>it.id !== targetId);\n    //해당 id의 리스트를 제외하고 다시 필터링해서 리스트 배열하기.\n    setData(newDiaryList);\n    // 그런다음 바뀐 변화를 적용하기.\n  };\n\n  return (\n    <div className=\"App\">\n      <DiaryEditor onCreate={onCreate}/>\n      <DiaryList onDelete={onDelete} diaryList={data}/>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACxC,OAAO,WAAW;AAClB,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,SAAS,MAAM,aAAa;AAAC;AAEpC,SAASC,GAAG,GAAG;EAAA;EAEb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMM,MAAM,GAAGP,MAAM,CAAC,CAAC,CAAC;EACxB,MAAMQ,QAAQ,GAAG,CAACC,MAAM,EAAEC,OAAO,EAAEC,OAAO,KAAK;IAC7C,MAAMC,YAAY,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IACzC,MAAMC,OAAO,GAAG;MACdN,MAAM;MACNC,OAAO;MACPC,OAAO;MACPC,YAAY;MACZI,EAAE,EAAGT,MAAM,CAACU;IACd,CAAC;IACDV,MAAM,CAACU,OAAO,IAAI,CAAC;IACnBX,OAAO,CAAC,CAACS,OAAO,EAAE,GAAGV,IAAI,CAAC,CAAC;EAC7B,CAAC;EAED,MAAMa,QAAQ,GAAIC,QAAQ,IAAK;IAC7BC,OAAO,CAACC,GAAG,CAAE,GAAEF,QAAS,WAAU,CAAC;IACnC,MAAMG,YAAY,GAAGjB,IAAI,CAACkB,MAAM,CAAEC,EAAE,IAAGA,EAAE,CAACR,EAAE,KAAKG,QAAQ,CAAC;IAC1D;IACAb,OAAO,CAACgB,YAAY,CAAC;IACrB;EACF,CAAC;;EAED,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB,QAAC,WAAW;MAAC,QAAQ,EAAEd;IAAS;MAAA;MAAA;MAAA;IAAA,QAAE,eAClC,QAAC,SAAS;MAAC,QAAQ,EAAEU,QAAS;MAAC,SAAS,EAAEb;IAAK;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAC7C;AAEV;AAAC,GA/BQD,GAAG;AAAA,KAAHA,GAAG;AAiCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}